# -*- coding: utf-8 -*-
"""app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1HprnzHa4UwoQ1gLsCBVtFenzrwh7IQzu
"""

app_code = """
import streamlit as st
import pandas as pd
from simulation import UserInput, run_simulation, plot_simulation_results, generate_summary

st.set_page_config(page_title="Investment & Loan Strategy Simulator", layout="centered")

st.title("ðŸ“Š Investment-Cum-Loan Repayment Simulator")

with st.form("input_form"):
    # Calculate Monthly Savings Preview
    monthly_salary_usd = gross_salary / 12
    after_tax_usd = monthly_salary_usd * (1 - us_tax / 100)
    monthly_savings_usd = after_tax_usd - expenses
    monthly_savings_inr = monthly_savings_usd * fx_rate

# Display it in the UI
    st.markdown(f"**ðŸ’° Estimated Monthly Savings (INR): â‚¹{monthly_savings_inr:,.2f}**")


    st.subheader("User Profile & Inputs")
    st.markdown("### ðŸ’¼ Salary & Expense Info")
    gross_salary = st.number_input("Gross Annual Salary (USD)", value=90000, help="Your annual salary offer in USD")
    us_tax = st.slider("US Tax Rate (%)", 10, 40, 25, help="Approximate income tax deducted in the U.S.")
    expenses = st.number_input("Monthly Living Expenses (USD)", value=2000.0, help="Monthly rent, food, transport, etc.")

    st.subheader("Loan Details")
    loan_amt = st.number_input("Education Loan Amount (INR)", value=2500000, help="Total loan amount borrowed from an Indian bank in Indian Rupees.")
    interest_rate = st.slider("Loan Interest Rate (%)", 5, 20, 11, help="Annual interest rate charged by your bank on the education loan.")
    emi = st.number_input("Monthly EMI (INR)", value=27000, help="Fixed monthly EMI (Equated Monthly Installment) that must be paid once the moratorium ends.")
    moratorium = st.slider("Moratorium Period (Months)", 0, 24, 6, help="Number of months after graduation before you need to start EMI payments.")
    loan_term = st.selectbox("Loan Duration (Months)", [60, 84, 120, 180, 240], help="Total loan repayment period in months. Choose the actual term given by your lender.")

    st.subheader("Investment Details")
    invest_rate = st.slider("Investment Return Rate (%)", 0, 20, 12, help="Expected annual return rate from your investments in India (e.g., mutual funds, FDs).)
    tax_rate = st.slider("Indian Tax Rate (%)", 0, 30, 15, help="Indian tax rate on returns from investments. Used to calculate post-tax gains.")
    fx_rate = st.number_input("USD to INR Conversion Rate", value=83.5,  help="Current or assumed conversion rate from US Dollars to Indian Rupees.")

    st.subheader("Strategy")
    strategy = st.selectbox("Select Strategy", ['A', 'B', 'C', 'D'],  help="Choose a strategy: A = Aggressive Loan Repayment, B = Balanced, C = Invest-First then Balanced, D = Invest-First then Aggressive Repayment.")
    invest_percent = st.slider("Percent of Savings to Invest (%)", 0, 100, 60,  help="Portion of your monthly savings (in INR) to be allocated to investments. The rest goes to loan repayment.")

    st.subheader("Simulation Settings")
    sim_years = st.slider("Number of Years to Simulate", 1, 30, 10, help="How many years after graduation you want to simulate your financial plan.")

    submitted = st.form_submit_button("Run Simulation")

if submitted:
    user_input = UserInput(
        gross_annual_salary_usd=gross_salary,
        us_tax_rate=us_tax/100,
        monthly_expenses_usd=expenses,
        loan_amount_inr=loan_amt,
        interest_rate_loan=interest_rate,
        emi_inr=emi,
        moratorium_months=moratorium,
        loan_term_months=loan_term,
        investment_rate_annual=invest_rate,
        indian_tax_rate=tax_rate,
        usd_to_inr_rate=fx_rate,
        percent_to_invest=invest_percent,
        years_to_simulate=sim_years,
        strategy_type=strategy
    )

    df = run_simulation(user_input)

    st.subheader("ðŸ“ˆ Results Summary")
    generate_summary(df, user_input)

    st.subheader("ðŸ“‰ Chart")
    plot_simulation_results(df, user_input.emi_inr)

    st.subheader("ðŸ“¤ Download Results")
    csv = df.to_csv(index=False).encode('utf-8')
    st.download_button("Download CSV", csv, "simulation_output.csv")

    df.to_excel("simulation_output.xlsx", index=False)
    with open("simulation_output.xlsx", "rb") as f:
        st.download_button("Download Excel", f, "simulation_output.xlsx")
"""

with open("app.py", "w") as file:
    file.write(app_code)

!ls
