# -*- coding: utf-8 -*-
"""Invest_cum_Loan Repayment Decision.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xnD6U1f_7zbMTFkNd2jHicugH98mv9_L
"""

simulation_code = """
from dataclasses import dataclass
import pandas as pd
import matplotlib.pyplot as plt

@dataclass
class UserInput:
    gross_annual_salary_usd: float
    us_tax_rate: float
    monthly_expenses_usd: float
    loan_amount_inr: float
    interest_rate_loan: float
    emi_inr: float
    moratorium_months: int
    loan_term_months: int
    investment_rate_annual: float
    indian_tax_rate: float
    usd_to_inr_rate: float
    percent_to_invest: float
    years_to_simulate: int
    strategy_type: str  # 'A', 'B', 'C', 'D'

class LoanAccount:
    def __init__(self, balance, annual_rate):
        self.balance = balance
        self.monthly_rate = annual_rate / 12 / 100

    def grow(self):
        self.balance *= (1 + self.monthly_rate)

    def repay(self, amount):
        self.balance = max(0, self.balance - amount)

class InvestmentAccount:
    def __init__(self, rate, tax_rate):
        self.balance = 0
        self.monthly_rate = rate / 12 / 100
        self.tax_rate = tax_rate / 100

    def grow(self):
        returns = self.balance * self.monthly_rate
        after_tax = returns * (1 - self.tax_rate)
        self.balance += after_tax
        return after_tax

    def contribute(self, amount):
        self.balance += amount

class StrategyHandler:
    def __init__(self, user: UserInput, month: int):
        self.user = user
        self.month = month

    def get_allocation(self, monthly_savings_inr):
        in_moratorium = self.month < self.user.moratorium_months
        strategy = self.user.strategy_type.upper()
        invest = repay = 0

        if strategy == 'A':
            invest = 0
            repay = monthly_savings_inr
        elif strategy == 'B':
            invest = monthly_savings_inr * (self.user.percent_to_invest / 100)
            repay = monthly_savings_inr - invest
        elif strategy == 'C':
            if in_moratorium:
                invest = monthly_savings_inr
                repay = 0
            else:
                invest = monthly_savings_inr * (self.user.percent_to_invest / 100)
                repay = monthly_savings_inr - invest
        elif strategy == 'D':
            if in_moratorium:
                invest = monthly_savings_inr
                repay = 0
            else:
                invest = 0
                repay = monthly_savings_inr
        return invest, repay

class Simulator:
    def __init__(self, user_input: UserInput):
        self.user = user_input
        self.loan = LoanAccount(user_input.loan_amount_inr, user_input.interest_rate_loan)
        self.investment = InvestmentAccount(user_input.investment_rate_annual, user_input.indian_tax_rate)
        self.monthly_salary_inr = self._get_monthly_savings_inr()
        self.total_months = user_input.years_to_simulate * 12
        self.data = []

    def _get_monthly_savings_inr(self):
        monthly_salary_usd = self.user.gross_annual_salary_usd / 12
        after_tax = monthly_salary_usd * (1 - self.user.us_tax_rate)
        savings_usd = after_tax - self.user.monthly_expenses_usd
        return savings_usd * self.user.usd_to_inr_rate

    def run(self):
        emi = self.user.emi_inr
        for month in range(self.total_months):
            in_moratorium = month < self.user.moratorium_months
            strategy = StrategyHandler(self.user, month)
            invest_amt, repay_amt = strategy.get_allocation(self.monthly_salary_inr)

            monthly_return = self.investment.grow()

            loan_payment = 0
            if not in_moratorium and self.loan.balance > 0:
                self.loan.grow()
                loan_payment = min(emi, self.loan.balance)
                self.loan.repay(loan_payment)
                self.loan.repay(repay_amt)
            else:
                self.loan.grow()

            self.investment.contribute(invest_amt)
            net_worth = self.investment.balance - self.loan.balance

            self.data.append({
                'Month': month + 1,
                'Loan Balance': self.loan.balance,
                'Investment Balance': self.investment.balance,
                'Monthly Return': monthly_return,
                'Net Worth': net_worth,
                'Investment Contribution': invest_amt,
                'Loan Repayment (extra)': repay_amt,
                'EMI Paid': loan_payment
            })

        return pd.DataFrame(self.data)

def run_simulation(user_input: UserInput):
    sim = Simulator(user_input)
    df = sim.run()
    return df

def plot_simulation_results(df, emi_inr):
    import matplotlib.pyplot as plt
    plt.figure(figsize=(12, 6))
    plt.plot(df['Month'], df['Loan Balance'], label='Loan Balance')
    plt.plot(df['Month'], df['Investment Balance'], label='Investment Balance')
    plt.plot(df['Month'], df['Net Worth'], label='Net Worth')

    break_even = df[df['Net Worth'] >= 0].head(1)
    if not break_even.empty:
        be_month = break_even['Month'].values[0]
        plt.axvline(x=be_month, color='green', linestyle='--', label=f'Break-even (Month {be_month})')

    df['Post-Tax Investment Income'] = df['Investment Balance'] * (user_input.investment_rate_annual / 12 / 100) * (1 - user_input.indian_tax_rate / 100)
    emi_coverage = df[df['Post-Tax Investment Income'] >= emi_inr].head(1)
    if not emi_coverage.empty:
        emi_month = emi_coverage['Month'].values[0]
        plt.axvline(x=emi_month, color='orange', linestyle='--', label=f'Investment ≥ EMI (Month {emi_month})')

    plt.title(\"Net Worth, Loan, and Investment Over Time\")
    plt.xlabel(\"Month\")
    plt.ylabel(\"INR\")
    plt.grid(True)
    plt.legend()
    plt.tight_layout()
    plt.show()

def generate_summary(df, user_input):
    final = df.iloc[-1]
    break_even = df[df['Net Worth'] >= 0].head(1)
    emi_coverage = df[df['Post-Tax Investment Income'] >= user_input.emi_inr].head(1)
    loan_cleared = df[df['Loan Balance'] <= 0].head(1)

    print(f\"Strategy selected: {user_input.strategy_type}\")
    if not loan_cleared.empty:
        print(f\"✅ Loan fully repaid in Month {loan_cleared['Month'].values[0]}\")
    else:
        print(\"⚠️ Loan not fully repaid within the simulation period.\")

    if not break_even.empty:
        print(f\"✅ Net worth breaks even in Month {break_even['Month'].values[0]}\")
    else:
        print(\"⚠️ Net worth did not break even.\")

    if not emi_coverage.empty:
        print(f\"✅ Investment returns begin covering EMI in Month {emi_coverage['Month'].values[0]}\")
    else:
        print(\"⚠️ Investment returns did not reach EMI threshold.\")

    print(f\"📈 Final Net Worth: ₹{final['Net Worth']:.2f}\")
    print(f\"💰 Final Investment Balance: ₹{final['Investment Balance']:.2f}\")
    print(f\"🏦 Remaining Loan Balance: ₹{final['Loan Balance']:.2f}\")
"""
